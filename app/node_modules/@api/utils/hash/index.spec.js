/* eslint-env mocha */

const T = require('./index.js')

/**
 * The maximum amount of time that the hashing should take in milliseconds
 * @type {Number}
 */
const MAX_TIME_LIMIT = 500

describe('the "hash" module', () => {
  it('should export a function', () => {
    const expected = 'function'
    const actual = typeof T

    expect(actual).to.equal(expected)
  })

  describe('the exported function', () => {
    it('should throw an error for invalid parameter values', () => {
      const ERR_INVALID_INPUT = 'Please provide a non-empty string'
      const badValues = ['', {}, null ]
      
        badValues.map((value) => {
        expect(() => {T(value)} ).to.throw(ERR_INVALID_INPUT)
        })
    })

    it('should return a string', () => {
      const expected = 'string'
      const actual = typeof T('query')

      expect(actual).to.equal(expected)
    })

    it('should return a value different from the input value', () => {
      const actual = T('query')
      expect(actual).to.not.equal('query')
    })

    it('should return a value with at least a length of one', () => {
      const actual = T('query').length
      expect(actual).to.be.at.least(1)
    })

    it('should return a value after a minimum delay', () => {
      const start = Date.now()
      T('query')
      const delta = Date.now() - start
      expect(delta).to.be.at.least(150)
    })

    it('should return a value before a maximum limit', () => {
      const start = Date.now()
      T('query')
      const delta = Date.now() - start
      expect(delta).to.be.at.most(MAX_TIME_LIMIT)
    })
  })  
})
